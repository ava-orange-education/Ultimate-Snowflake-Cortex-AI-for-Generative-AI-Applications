USE DATABASE CORTEX_AI_DB;

-------Creating Train and Test Data-----
CREATE OR REPLACE TABLE TRAIN_DATA_EMPLOYEE_CHURN AS
SELECT * FROM CORTEX_AI_DB.PUBLIC.CALL_CENTER_EMPLOYEE_CHURN SAMPLE (80);

CREATE OR REPLACE TABLE CORTEX_AI_DB.PUBLIC.TEST_DATA_EMPLOYEE_CHURN 
AS
SELECT * FROM CALL_CENTER_EMPLOYEE_CHURN WHERE NOT EXISTS (
SELECT 1 FROM TRAIN_DATA_EMPLOYEE_CHURN WHERE
CALL_CENTER_EMPLOYEE_CHURN.EMPLOYEE_ID = TRAIN_DATA_EMPLOYEE_CHURN.EMPLOYEE_ID);


-- CHECKING THE COUNT OF TRAIN AND TEST DATA
SELECT COUNT(*) FROM CALL_CENTER_EMPLOYEE_CHURN;

SELECT COUNT(*) FROM TRAIN_DATA_EMPLOYEE_CHURN
union all
SELECT COUNT(*) FROM TEST_DATA_EMPLOYEE_CHURN;


-----Dropping unused columns from train and test data
ALTER TABLE TRAIN_DATA_EMPLOYEE_CHURN DROP COLUMN EMPLOYEE_ID;
ALTER TABLE TEST_DATA_EMPLOYEE_CHURN DROP COLUMN CHURN;

select * from TRAIN_DATA_EMPLOYEE_CHURN;
select * from TEST_DATA_EMPLOYEE_CHURN;


--------Creating Native ML Classifier
CREATE OR REPLACE SNOWFLAKE.ML.CLASSIFICATION CHURN_MODEL(
    INPUT_DATA => SYSTEM$REFERENCE('TABLE', 'TRAIN_DATA_EMPLOYEE_CHURN'),
    TARGET_COLNAME => 'CHURN'
);

-- CREATE A TABLE AND STORE THE PREDICTED OUTCOME FROM TEST DATA
CREATE OR REPLACE TABLE EMPLOYEE_CHURN_PREDICTION AS
SELECT *, CHURN_MODEL!PREDICT(INPUT_DATA => object_construct(*))
as prediction from TEST_DATA_EMPLOYEE_CHURN;

SELECT * FROM EMPLOYEE_CHURN_PREDICTION;

-- PARSE THE PREDICTED RESULTS INTO SEPERATE COLUMNS
SELECT * EXCLUDE prediction,
        prediction:class AS pred_class,
        round(prediction['probability'][prediction:class], 3) as probability
FROM EMPLOYEE_CHURN_PREDICTION;